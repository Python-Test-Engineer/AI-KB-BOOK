{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"AI Knowledge Bases","text":""},{"location":"#motivation","title":"Motivation","text":"<p>I really enjoy coming a across a resource that helps me understand a subject and that has a repo of the code that works 'out of the box' and additionally a video explainer rather than just an article.</p> <p>I have created or collected such resources and combined them into a 'book', citing references where appropriate.</p>"},{"location":"#purpose_of_this_book","title":"Purpose of this book","text":"<ol> <li> <p>To provide a number of ready built and congfigurable FULL STACK PYTHON TEST FRAMEWORK, (PFS), comprising of over 200 highly commented test templates for developers to adapt to their own needs along with resource links that have helped me greatly, as well as integration of these into the frameworks.</p> </li> <li> <p>To provide a curated source of articles and videos that surround PyTest, for example Docker, that enable 'out of the box' ease of use. Some are created by me, others reference with acknowledgments other sources.</p> </li> </ol>"},{"location":"#pytest_full_stack_pfs","title":"PyTest Full Stack, (PFS)","text":"<p>The PyTest Full Stack suite has an installation that will just require a 1-2-3 of:</p> <ol> <li><code>pip install -r requirements.txt</code>.</li> <li><code>playwright install</code> to load Playwright browsers.</li> <li><code>python -m pytest -v</code> to run over 200 tests.</li> </ol> <p>PFS uses a number of PyTest hooks for utilities and features.</p> <p>One of these is customising the terminal report and one can configure the output in a number of ways, explained in articles and videos.</p> <p>Here is a sample output:</p>"},{"location":"#custom_header_sections","title":"Custom header sections","text":""},{"location":"#customised_words_colours_and_icons","title":"Customised words, colours and icons","text":""},{"location":"#custom_footer_sections","title":"Custom footer sections","text":"<p>The frameworks have logging and other utilities installed to provide a complete framework.</p> <p>Resources included are:</p> <ol> <li>Links to helpful articles, videos and documentation. </li> <li>Converted and transcribed code of great YT videos where there is no code repo.</li> </ol>"},{"location":"#test_frameworks","title":"Test frameworks","text":"<p>See the README.md in root of each test framework for detailed and up to date set up instructions.</p> <p>There are two main test frameworks:</p> <ul> <li>PyTest Full Stack - a full stack testing framework from SQL Schemas to E2E testing with Playwright</li> <li>PyTest Django Full Stack- is its own unique testing framework built from a range of sources. (Under construction and will be a PyTest-Full-Stack test suite for Django).</li> </ul> <p>I strive to acknowledge sources I have used to learn PyTest and any adaptations of code samples used therein.</p> <p>As a curated list of resources, I have integrity over linking to the work of others and due credits are given.</p> <p>Often I am a wrapper around someone else's effort and I try to add a different presentation whre possible, as we often find our understanding with a different presentation of the subject. Hence having may teachers enables us all as eternal students to get our heads around sometimes very complex subjects.</p> <p></p>"},{"location":"asides/asides/","title":"Asides","text":""},{"location":"asides/asides/#what_are_asides","title":"What are asides?","text":"<p>Asides are articles on useful aspects of PyTest Full Stack but are not part of a PyTest Full Stack Run.</p> <p>For example, we have a folder <code>docker</code> that is integrated into PFS, but we also have an isolated set of docker tests that would need to be run in a separate and isolated environment with elements of PFS added in. </p> <p>Essentially the converse of what we are doing in PFS.</p> <p>An example is tests/_isolated_suites which has a docker-postgres-fixtup suite.</p>"},{"location":"asides/asides/#pluggy","title":"Pluggy","text":"<p>Pytest uses Pluggy to have a plugin architecture.</p> <p>Using Pluggy docs, I have created a repo andd video of the examples in the docs as well as extend it to include two plugins rather than just one.</p>"},{"location":"asides/asides/#mocking","title":"Mocking","text":"<p>This covers mock, patch and monkeypatch using Rich and PyBoxed for pretty console output. We look at globals() and sys.modules to see what is happening under the hood as well as create our own mocks to better understand this topic.</p> <p></p>"},{"location":"asides/decorators/","title":"Decorators","text":"<pre><code># a fixture that returns a value\n@pytest.mark.fixture(name=\"init_value\"):\ndef func_value():\n    return some_value\n\n# pytest.mark.fixture is a regular function\n\ndec = pytest.mark.fixture(name=\"init_value\")\ndec(func_value)\n\ngiving us a closure over \"init_value\" which is avaialbe in the decorated function.\n</code></pre>"},{"location":"asides/mocking/","title":"Python Mock, Patch and Monkeypatch","text":""},{"location":"asides/mocking/#about","title":"About","text":"<p>I have created a repo and video series to dive deeper into what mock, patch and monkeypatch do behind the scenes.</p> <p>Using Rich and PyBoxen for pretty console output, we look at globals() and sys.modules to see how we can create our own mocks and patches.</p> <p>We will also look at the source code for <code>mock.py</code> as well as look at a number of template examples that I have collected from various named sources.</p> <p>The hardest part is 'getting' the wiring so it is best to work with the repo and break and fix the tests to really understand that patching involves using `where it is called, not where it is defined'.</p> <p>Regardless, these act as templates and with use the wiring will become clearer.</p>"},{"location":"asides/mocking/#repo","title":"Repo","text":"<p>The repo is here.</p>"},{"location":"asides/mocking/#yt_video_series","title":"YT video series","text":"<p>The series is here.</p> <p>I have endeavoured to make the repo heavily commented so that it can be used as an 'ebook'.</p> <p></p>"},{"location":"asides/pluggy/","title":"Pluggy","text":""},{"location":"asides/pluggy/#about","title":"About","text":"<p>Pluggy as per docs:</p> <ul> <li> <p>pluggy is the crystallized core of plugin management and hook calling for pytest. It enables 1400+ plugins to extend and customize pytest\u2019s default behaviour. Even pytest itself is composed as a set of pluggy plugins which are invoked in sequence according to a well defined set of protocols.</p> </li> <li> <p>It gives users the ability to extend or modify the behaviour of a host program by installing a plugin for that program. The plugin code will run as part of normal program execution, changing or enhancing certain aspects of it.</p> </li> <li> <p>In essence, pluggy enables function hooking so you can build \u201cpluggable\u201d systems.</p> </li> </ul> <p>I have uploaded a video and repo where I have encoded the 'complete example' in the docs and added a second plugin so that the host can be run with two plugins extending its functionality.</p>"},{"location":"asides/pluggy/#repo","title":"Repo","text":"<p>A tested project is available here: GiHub</p>"},{"location":"asides/pluggy/#yt_video","title":"YT Video","text":"<p>There is an explainer video (7mins) to walk through installation and running: YouTube</p> <p></p>"},{"location":"blog/","title":"Blog","text":""},{"location":"craig/contact/","title":"Contact me","text":"<p>Email: iwswordpress@gmail.com</p> <p>LinkedIn: Craig West</p>"},{"location":"craig/courses/","title":"Online courses","text":""},{"location":"craig/courses/#udemycom","title":"Udemy.com","text":"<p>The course Udemy Hooks and Plugins course has just been published and Udemy has a sale ever two weeks and the cost would be $20 USD approx.</p> <p></p> <p>I am currently developing two courses:</p> <ul> <li>Python - mock, patch and monkeypatch.</li> <li>PyTest Django Full Stack - a DB &lt;-&gt; E2E testing of a generic ecommerce store.</li> </ul> <p>The aim is to make them generic, ready to go templates, that also dive deeper into aspects of Python.</p> <p>I am of the opinion that as developers we do not need to reinvent the wheel - it has (almost) all been done before - and that we should be free to use our creativity to build great proucts.</p> <p>The type of course I would want...</p> <p></p>"},{"location":"craig/cv/","title":"CV","text":""},{"location":"craig/cv/#github_cv","title":"GitHub CV","text":"<p>I use GitHub to host a copy of my CV.</p> <p>Github CV</p>"},{"location":"craig/cv/#python_backend_and_test_automation_engineer","title":"Python Backend and Test Automation Engineer","text":"<ul> <li>Degree in Chemistry, Oxford University.</li> <li>Former A+ PC Technician, Microsoft Certified Systems Engineer and Microsoft Certified SQL Server DBA.</li> <li>Former Business Information Architect.</li> <li>Qualified Accountant Technician and business owner.</li> <li>Experience with REST APIs, GraphQL, React, Vue, Web Components, Node, Docker</li> <li>Talks and workshops given at WordCamps, MeetUps and NDC.</li> </ul>"},{"location":"craig/cv/#talks_and_workshops","title":"Talks and Workshops","text":"<p>A list of talks and workshops I have given: </p> <ul> <li> <p>TALK: Offline and instant websites, aka Progressive Web Apps - AsyncJS, Brighton, September 2021.</p> </li> <li> <p>LIGHTNING TALK: WordPress as a Micro Service to any framework - WordFest, July 2021.</p> </li> <li> <p>TALK: WP REST API and Web Components =&gt; 100% Internet - WordCamp Santa Clarita, July 2021.</p> </li> <li> <p>TALK: Web Components in WP, Gutenberg and as HTML plugins. - WordCamp North East Ohio May 2021.</p> </li> <li> <p>TALK: Leveraging the power or the WordPress REST API - WP Leeds April 2021</p> </li> <li> <p>WORKSHOP: WP REST API and you -&gt; Best Friends Forever workshop (90 mins) - WordCamp Greece April 2021 </p> </li> <li> <p>TALK: Web Components as Micro Apps - NDC London, Jan 2021</p> </li> <li> <p>TALK: Unifying frameworks with Web Components - Brighton AsyncJS, Nov 2020</p> </li> <li> <p>WORKSHOP: Progressive Web Apps Workshop (2hrs) - NDC Oslo June 2020 and a paid training workshop with NDC</p> </li> <li> <p>WORKSHOP: Web Components Workshop (2hrs) - NDC Oslo June 2020 and a paid training workshope with NDC</p> </li> <li> <p>WORKSHOP: Progressive Web Apps Workshop (2hrs) - Brighton WordUp June 2020</p> </li> <li> <p>WORKSHOP: WordPress REST API with AJAX Forms and Pages - WordCamp Denver, June 2020.</p> </li> <li> <p>WORKSHOP: WordPress REST API with AJAX Forms and Pages - WordCamp Kent, Ohio May 2020.</p> </li> <li> <p>TALK: What is the WP REST API and how can I use it to make forms and pages that don\u2019t need to do be reloaded? - WordUp Brighton May 2020.</p> </li> <li> <p>WORKSHOP: WordPress REST API and AJAX Forms - WordCamp Geneva March 2020 EVENT CANCELLED due to virus concerns </p> </li> <li> <p>TALK - WP-HTML: The marriage of WP and JS Frameworks for expansion, ubiquity and profit - WordCamp Vienna February 2020.</p> </li> <li> <p>WORKSHOP: WordPress REST API - WordCamp Vienna February 2020.</p> </li> <li> <p>TALK: Progressive Web Apps - Brighton WordUp November 2019.</p> </li> <li> <p>TALK: Decoupled WordPress (code along style) - WordCamp Dublin October 2019.</p> </li> <li> <p>TALK: JWT and Authentication - WPHooked London September 2019</p> </li> <li> <p>TALK: Decoupled WordPress and WP Components - WordCamp Brighton August 2019.</p> </li> </ul>"},{"location":"craig/cv/#published_udemy_courses","title":"Published Udemy Courses","text":"<p>Udemy is a great learning platform and having sales at least once a month, courses can be purchased for ~ \u00a315/$15 USD.</p> <p>These have now been retired.</p> <ul> <li>WordPress REST API and AJAX Forms/Pages - DEMO https://www.youtube.com/watch?v=eubhbcGH_Ws&amp;t=6s (paid)</li> <li>Progressive Web Apps - DEMO https://www.youtube.com/watch?v=k_lHvNL0gkw (paid)</li> <li>WP-HTML: decoupling WordPress to any HTML platform using Web Components and the WP REST API. This also enables HTML plugins for non-WP Sites - https://www.udemy.com/course/powerful-html-pages-using-wordpress-component-architecture/ (free)</li> <li>Stylish Dynamic Web Forms with jQuery validation - https://www.udemy.com/course/ready-to-use-form-validation-templates-with-jquery/ (free)</li> </ul>"},{"location":"craig/cv/#youtube_courses_-_developer_to_developer_courses","title":"YouTube Courses - Developer to Developer courses","text":"<p>These are video courses that cover work through official documents to help other developers, learn in public and show prosepective employers not just what I know but how I learn and how I communicate technical matters to others.</p> <p>There are also some specific videos explaining solutions to set ups other developers may encounter.</p> <ul> <li> <p>HIGHLY-FUNCTIONAL-WEBCOMPONENTS: A video course based on the workshop I gave at NDC Oslo June 2020 - https://www.youtube.com/watch?v=QC-JTqQTv2k&amp;list=PLsszRSbzjyvkQwzrJobroRl7z7MfSlePa </p> </li> <li> <p>WP Plugin Boilerplate:  I havea video series to explain WP Plugin Boilerplate using a scaffolded out project that demonstrates the use of MySQL, wp_nonce, REST API, forms and how to redirect pages to plugin templates to make the plugin theme independent. https://www.youtube.com/watch?v=lJ9ktD4JOfs&amp;list=PLsszRSbzjyvn-RQr4dEjrgnTne2HcJKee</p> </li> </ul>"},{"location":"craig/cv/#volunteering","title":"Volunteering","text":"<p>I volunteer at Codebar.io in Brighton as well as some Community Kitchens.</p>"},{"location":"craig/cv/#outside_interests","title":"Outside interests","text":"<p>These include Community Kitchens, gym, occasional partner dancing and DIY.</p> <p></p>"},{"location":"craig/services/","title":"Services provided","text":""},{"location":"craig/services/#backend_pythonista_and_test_automation_engineer","title":"Backend Pythonista and Test Automation Engineer","text":""},{"location":"craig/services/#skillset","title":"Skillset","text":"<p>Primarily:</p> <ul> <li>Python</li> <li>PyTest</li> <li>Playwright</li> <li>Django</li> </ul> <p>Tools:</p> <p>I strive to dive deeper into these tools and see them as programming languages in their own right. DevOps seems to be an essential part of my work:</p> <ul> <li>Shell Scripting</li> <li>Git/GitHub Actions</li> <li>Docker</li> </ul>"},{"location":"craig/services/#engagement_style","title":"Engagement Style","text":"<p>I offer on-demand, freelance services starting from 1/2 day blocks.</p> <p>As and when you need it...</p> <p>Tech is a way of life for me not just a job and I strive to have enthusiasm and passion for the projects I work on. Professional fulfilment is paramount.</p>"},{"location":"craig/services/#eligibility","title":"Eligibility","text":"<ul> <li>UK National</li> <li>Fluent English</li> </ul>"},{"location":"craig/services/#on-sitehybrid","title":"On-site/Hybrid","text":"<p>I am based in Brighton and enjoy (local) on-site work as well as working from my home office.</p>"},{"location":"craig/services/#volunteer_coach","title":"Volunteer Coach","text":"<p>I am a volunteer coach with Codebar Brighton.</p>"},{"location":"craig/services/#youtube","title":"YouTube","text":"<p>I produce a large amount of content that is associated with a repo that enables 'out of the box' ease of use.</p> <p>If I find good videos without a repo, I often create a repo and my own video with reference to the source video. I have no commercial interest in this matter.</p> <p>My YouTube Channel</p>"},{"location":"craig/services/#outside_of_tech","title":"Outside of tech...","text":"<p>I enjoy working in community kitchens and love laughter, creating, doing and trying to work out why things are funny.</p> <p></p>"},{"location":"toolbox/allure_windows_setup/","title":"Allure Reporting - Windows","text":"<p>If you are on Windows, like me, we can set up Allure as follows:</p> <p>I used the following video as learning:</p> <p>Useful JDK Video</p> <p>I created my own video here:</p> <p>Install JDK</p> <p>To install Allure: </p> <p>Allure Install</p> <ul> <li>For Allure, download the zip of the version you want.</li> <li>Unzip and place in a location of your choice.</li> <li>Add the path in environment variables. Mine was C:\\allure\\bin</li> </ul> <p></p>"},{"location":"toolbox/docker_postgres_yoyo_pytest/","title":"Docker Postgres Yoyo PyTest","text":""},{"location":"toolbox/docker_postgres_yoyo_pytest/#yoyo","title":"Yoyo","text":"<ul> <li>Repo: https://github.com/Python-Test-Engineer/yt-docker-postgres-yoyo-pytest</li> <li>YouTube: due soon...</li> <li>YoYo docs: https://ollycope.com/software/yoyo/latest/</li> </ul> <p>Yoyo is a database migration tool like Alembic, except it does not use an ORM but SQL.</p> <p>In thisproject, yt-docker-postgres-yoyo-pytest, we use Docker and Postgres along with YoYo migrations to set up an ecommerce database. </p> <p>Using various SQL scripts, we can get a list of all constraints - PK, FK, Defaults, Unique and Check - which can then be used to carry out structural testing to ensure that database intgerity is preserved during development.</p> <p>YoYo acts like Git for our migrations with rollback made possible.</p>"},{"location":"toolbox/docker_postgres_yoyo_pytest/#migrations","title":"Migrations","text":"<p><code>yoyo new -m \"add foreign keys\"</code> creates a file in the <code>migrations</code> folder that has 'steps' of SQL and their rollback. The file has a name of <code>datestamp-random_chars-message_used.py</code>.</p> <p></p> <p></p> <p>There can be many step functions in the steps list.</p>"},{"location":"toolbox/docker_postgres_yoyo_pytest/#fix_plg_resourcs_error","title":"Fix plg_resourcs error","text":"<p>You may not get this but I had this, when I installed on Windows- it complained of 'no pkg_resources'.</p> <p>This was fixed with installing setuptools, (in requirements.txt).</p>"},{"location":"toolbox/docker_postgres_yoyo_pytest/#yoyo_list","title":"<code>yoyo list</code>","text":"<p>This lists all migrations and their status - 'U' unapplied and 'A' applied</p> <p></p>"},{"location":"toolbox/docker_postgres_yoyo_pytest/#after_yoyo_apply","title":"After <code>yoyo apply</code>:","text":""},{"location":"toolbox/docker_postgres_yoyo_pytest/#after_two_yoyo_rollback","title":"After two <code>yoyo rollback</code>:","text":""},{"location":"toolbox/docker_postgres_yoyo_pytest/#pgadmin_looks_like","title":"PgAdmin looks like:","text":""},{"location":"toolbox/docker_postgres_yoyo_pytest/#project_structure","title":"Project structure","text":"<p>The <code>sql_schema folder</code> contains scripts to query the schema tables for all constraints.</p> <p>The <code>steps</code> folder has just the steps for reuse and archice.</p> <p>The <code>sql_postgres</code> folder has a number of python CRUD files that connect to the docker-postgres instance to act as a set up check and utilities.</p> <p><code>yoyo.ini</code> is a configurtion file that has minimal required settings for source of yoyo migration files, (migrations usually), and the DB connection URL:</p> <pre><code>sources = %(here)s/migrations\n; both host.docker.internal and localhost work\ndatabase = postgresql://postgres:postgres@host.docker.internal/postgres?port=5432\n</code></pre> <p>In the video, you will see examples of building up a number of migration files and also how to rollback one, many or all migrations.</p>"},{"location":"toolbox/docker_postgres_yoyo_pytest/#db_structural_testing","title":"DB Structural Testing","text":"<p>Our DB has PK, FK, Unique and Check constraints and we can access Postgres Schema to run tests on the strucure of the DB:</p> <ul> <li>Are all the tables there?</li> <li>Are all the PKs and FKs there?</li> <li>Are all the Unique and Check constraints there?</li> </ul> <p>This is in addition to CRUD testing we may do. This helps ensure that we have not damaged our DB schema during any development.</p> <p>The project also includes a folder of sql_postgress python modules to perfome CRUD etc.</p>"},{"location":"toolbox/docker_postgres_yoyo_pytest/#docker_postgres_setup","title":"Docker Postgres setup","text":"<p>It uses the standard docker-postgres-pgadmin-adminer-python-sql project to set up Docker Postgres.</p> <p></p>"},{"location":"toolbox/git_essentials/","title":"Git Essentials","text":"<p>A very good reference that is thorough yet light is https://www.atlassian.com/git/glossary#commands.</p> <p>Git commands I use most frequently in my work.</p>"},{"location":"toolbox/git_essentials/#clone_a_repo","title":"Clone a repo","text":"<pre><code>git clone &lt;repo_url&gt;\n</code></pre>"},{"location":"toolbox/git_essentials/#rename_a_branch","title":"Rename a branch","text":"<pre><code>git branch -M &lt;new_name&gt;\n</code></pre>"},{"location":"toolbox/git_essentials/#checkout_a_remote_branch","title":"Checkout a remote branch","text":"<pre><code>git checkout -b &lt;branch_name&gt; &lt;origin/branch_name&gt;\n</code></pre>"},{"location":"toolbox/git_essentials/#clear_git_cache","title":"Clear git cache","text":"<pre><code>git rm -r --cache .\n</code></pre>"},{"location":"toolbox/git_essentials/#delete_local_branch","title":"Delete local branch","text":"<pre><code>git branch -D &lt;branch_name&gt;\n</code></pre>"},{"location":"toolbox/git_essentials/#delete_remote_branch","title":"Delete remote branch","text":"<pre><code>git push origin --delete &lt;branch_name&gt;\n</code></pre>"},{"location":"toolbox/git_essentials/#list_remote_origin","title":"List remote origin","text":"<pre><code>git remote -v\n</code></pre>"},{"location":"toolbox/git_essentials/#change_url_of_remote_origin","title":"Change url of remote origin","text":"<pre><code>git remote set-url origin git@github.com:User/UserRepo.git\n</code></pre>"},{"location":"toolbox/git_essentials/#delete_remote_origin","title":"Delete remote origin","text":"<pre><code>git remote remove origin\n</code></pre>"},{"location":"toolbox/git_essentials/#add_a_remote_origin","title":"Add a remote origin","text":"<pre><code>git remote add origin &lt;remote_url&gt;\n</code></pre>"},{"location":"toolbox/git_essentials/#edit_previous_commit_message","title":"Edit previous commit message","text":"<p><pre><code>git commit --amend\n</code></pre>  - opens up git editor.</p>"},{"location":"toolbox/git_essentials/#list_checkouts_one_line","title":"List checkouts one line","text":"<pre><code>git log --pretty=oneline\n</code></pre>"},{"location":"toolbox/git_essentials/#go_back_to_a_previous_commit","title":"Go back to a previous commit","text":"<p><pre><code> git reset --soft HEAD~1\n</code></pre> Reset will rewind your current HEAD branch to the specified revision. In our example above, we'd like to return to the one before the current revision - effectively making our last commit undone.</p> <p>Note the --soft flag: this makes sure that the changes in undone revisions are preserved. After running the command, you'll find the changes as uncommitted local modifications in your working copy.</p> <p>If you don't want to keep these changes, simply use the --hard flag. Be sure to only do this when you're sure you don't need these changes anymore.</p>"},{"location":"toolbox/git_essentials/#go_back_to_the_previous_commit_hard","title":"Go back to the previous commit (hard)","text":"<pre><code>git reset --hard HEAD~1\n</code></pre>"},{"location":"toolbox/git_essentials/#go_back_to_a_particular_commit","title":"Go back to a particular commit","text":"<pre><code>git reset --hard 0ad5a7a6\n</code></pre>"},{"location":"toolbox/hatch/","title":"Hatch","text":""},{"location":"toolbox/hatch/#repo","title":"Repo","text":"<p>https://github.com/Python-Test-Engineer/yt-hatch</p>"},{"location":"toolbox/hatch/#youtube","title":"YouTube","text":"<p>https://www.youtube.com/watch?v=lmQvbLD6gXQ</p>"},{"location":"toolbox/hatch/#hatch_docs","title":"Hatch docs","text":"<p>https://hatch.pypa.io/latest/</p>"},{"location":"toolbox/hatch/#about","title":"About","text":"<p>I wanted to set up a new project using Hatch and understand how it uses environments.</p> <p>When I use Python's venv, I create a virtual environment and then run my project in that.</p> <p>Hatch lives outside of Python.</p> <p>We set up in pyproject.toml a number of environments for different use cases such as dev, linting etc.</p> <p>In the video and repo, I set up an environment that I will use during <code>dev</code> and show you a workflow for dev and testing.</p> <p></p>"},{"location":"toolbox/manage_docker_with_python/","title":"Manage Docker with Python","text":"<p>Repo: yt-docker-managed-by-python</p> <p>Video: to follow...</p> <p>There are two main libraries for this:</p> <ol> <li>Docs: Python on Whales</li> <li>Docs: Docker Py</li> </ol> <p>For Python on Whales, a very useful script is:</p> <p><pre><code>from python_on_whales import DockerClient\n\ndocker = DockerClient(compose_files=[\"../docker-compose.yml\"])\n\ndocker.compose.build()\ndocker.compose.up(detach=True)\n\n# docker.compose.down()\n</code></pre> By using a docker-compose.yaml file, we can use PyYaml to read, write and edit these files, enabling programatic customisation and creation of containers.</p> <p>Another example is : <pre><code>docker run --name some-postgres -e POSTGRES_PASSWORD=mysecretpassword -d postgres\n</code></pre> becomes <pre><code>from python_on_whales import docker\n\ndocker.run(\n    \"postgres:9.6\",\n    name=\"some-postgres\",\n    envs={\"POSTGRES_PASSWORD\": \"mysecretpassword\"},\n    detach=True,\n)\nprint(docker.ps())\n# [python_on_whales.Container(id='f5fb939c409d', name='some-postgres')]\n</code></pre> which can also be managed programatically.</p> <p>For Docker-Py we have:</p> <pre><code>import docker\nclient = docker.from_env()\nimage = client.images.pull(\"redis\")\noutput = client.containers.run(\"ubuntu\", \"echo hello world\")\noutput = output.decode(\"utf-8\")\nprint(str(output))\n\ncontainers = client.containers.list()\nfor container in containers:\n    print(container.name)\nPORT = random.randint(8000, 9000)\ncontainer = client.containers.run(\"nginx:latest\", detach=True, ports={\"80/tcp\": PORT})\n</code></pre> <p>Docker enables the use of ARG and --build-arg to add arguments prior to FROM, FROM usually being the first allowed command</p> <p><pre><code>ARG BaseImage\nFROM $BaseImage\n</code></pre> and this means we can use this and other shell variables to script a lot of processes and create our own testing matrix.</p> <p>For the Docker Py library we have:</p> <pre><code>import docker\nclient = docker.from_env()\nimage = client.images.pull(\"redis\")\noutput = client.containers.run(\"ubuntu\", \"echo hello world\")\noutput = output.decode(\"utf-8\")\nprint(str(output))\n\ncontainers = client.containers.list()\nfor container in containers:\n    print(container.name)\nPORT = random.randint(8000, 9000)\ncontainer = client.containers.run(\"nginx:latest\", detach=True, ports={\"80/tcp\": PORT})\n</code></pre> <p>Sources of YT video on Python and YAML</p> <ol> <li> <p>MathByte - shorter and more concise video with its repo installed in this project in <code>yaml</code> folder.</p> </li> <li> <p>DevOpsMadeEasy which has a YT video (1hr 45m) here.</p> </li> </ol> <p>The repo and video explore managing Docker programatically with Python, mostly through the use of editing docker compose files and then running them programatically.</p> <p></p>"},{"location":"toolbox/pydantic_dts/","title":"Pydantic Data Transformation Services","text":"<p>\"Today, Pydantic is downloaded many times a month and used by some of the largest and most recognisable organisations in the world.</p> <p>It's hard to know why so many people have adopted Pydantic since its inception six years ago, but here are a few guesses.\"</p> <p></p> <p>DESERIALIZATION === input string/dict/JSON data into Pydantic Python Models</p> <p>SERIALIZATION === output data from Pydantic Python Model to string/dict/JSON data</p>"},{"location":"toolbox/pydantic_dts/#lifecycles","title":"Lifecycles","text":""},{"location":"toolbox/pydantic_dts/#before","title":"Before","text":"<p>If we are importing in JSON for example, we can create aliases so that we can map firstName to first_name for example. We can also set rules for how Pydantic should handle extra fields.</p> <p>We can also apply validation and data transformation prior to Pydantic carry out its own validataion, transformation and insertion.</p>"},{"location":"toolbox/pydantic_dts/#pydantic_validation","title":"Pydantic validation","text":"<p>Our Pydantic model will validate data and return a list of errors that fail validation.</p> <p>Pydantic does not stop on the first failed validation but continues on until all fields have been validated and it will then report a list of all validation errors.</p>"},{"location":"toolbox/pydantic_dts/#after","title":"After","text":"<p>After Pydantic has run thorugh its own process, we can apply after validators/transformations prior to being inserted into the class.</p>"},{"location":"toolbox/pydantic_dts/#serialization","title":"Serialization","text":"<p>When serialising, ('exporting'), we can set up rules for include/exclude fields depending on whether we are exporting to a Python dict or JOSN object.</p>"},{"location":"toolbox/pydantic_dts/#ingesting_a_rest_api","title":"Ingesting a REST API","text":"<p>Using <code>https://dummyjson.com/users/3</code> we get a dictionary from our requests library.</p> <ul> <li><code>01_user.py</code> - set up model level configuration and filter API for just a few fields.</li> <li><code>02_user_composition.py</code> - we use nested models for our <code>address</code> field.</li> <li><code>03_user_field_validation.py</code> - we apply field level validation/transformation on the <code>last_name</code> field and also demonstrate ordering of decorators where we use many on on field:</li> </ul> <p> </p> <p>No matter what order the validators are lexcially defined in, the order is always Before first with furthest lexically first, then After with lexically nearest first.</p>"},{"location":"toolbox/pydantic_dts/#repo","title":"Repo","text":"<p>https://github.com/Python-Test-Engineer/yt-pydantic-dts</p>"},{"location":"toolbox/pydantic_dts/#youtube_video","title":"YouTube Video","text":"<p>https://www.youtube.com/playlist?list=PLsszRSbzjyvnRLSoGM3e-VspqImbWpXSL</p>"},{"location":"toolbox/pydantic_dts/#best_course_on_pydantic","title":"Best course on Pydantic","text":"<p>https://www.udemy.com/course/pydantic and there is a very good YT video by him https://www.youtube.com/watch?v=ok8bF8M7gjk which he also has a  repo for in the links.</p> <p></p>"},{"location":"toolbox/rich_pyboxen/","title":"Rich and Pyboxen","text":""},{"location":"toolbox/rich_pyboxen/#rich","title":"Rich","text":"<p>We can format the console using a very powerful library, Rich https://rich.readthedocs.io/en/latest/index.html.</p> <p> <pre><code>from rich import print\n\nprint(\"Hello, [bold magenta]World[/bold magenta]!\", \":vampire:\", locals())\n</code></pre> </p> <p>For a more pretty traceback:</p> <p><pre><code>from rich.traceback import install\ninstall(show_locals=True)\n</code></pre> </p> <p>A range of templates are available in Rich's GitHub repo here.</p>"},{"location":"toolbox/rich_pyboxen/#pyboxen","title":"PyBoxen","text":"<p>PyBoxen is built on Rich and provides quick boxes - https://github.com/savioxavier/pyboxen.</p> <p><pre><code>from pyboxen import boxen\n\nprint(\n    boxen(\n        \"Titles and subtitles!\",\n        title=\"Hello, [black on cyan] World [/]\",\n        subtitle=\"Cool subtitle goes here\",\n        subtitle_alignment=\"center\",\n        color=\"yellow\",\n        padding=1,\n    )\n)\n</code></pre> </p> <p></p>"},{"location":"toolbox/toolbox_index/","title":"Toolbox","text":"<p>This is a colelction of resources that are of use as a Python Test Engineer but are not part of PyTest Full Stack. </p> <p>They are self-contained units.</p> <p>Docker plays are a large part in the Toolbox and may end up having its own dedicated section.</p>"},{"location":"toolbox/visual_regression/","title":"Visual Regression","text":"<p>We can test whether two images are equal or how much they differ by on a pixel by pixel basis.</p> <p>We use the library <code>pixelmatch</code> https://pypi.org/project/pixelmatch/.</p>"},{"location":"toolbox/visual_regression/#youtube","title":"YouTube","text":"<p>https://www.youtube.com/watch?v=wMjsrsQK3hs</p>"},{"location":"toolbox/visual_regression/#repo","title":"Repo","text":"<p>https://github.com/Python-Test-Engineer/yt-visual-regression</p>"}]}